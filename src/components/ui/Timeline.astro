---
import { Icon } from 'astro-icon/components';
import { twMerge } from 'tailwind-merge';
import type { Item } from '~/types';

export interface Props {
  items?: Array<Item>;
  defaultIcon?: string;
  classes?: Record<string, string>;
  numberList?: boolean;
}

const { items = [], classes = {}, defaultIcon, numberList } = Astro.props as Props;

const {
  container: containerClass = '',
  panel: panelClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  icon: defaultIconClass = 'text-primary dark:text-slate-200 border-primary dark:border-blue-700',
} = classes;
---

{
  items && items.length && (
    <div class={containerClass}>
      {items.map(({ title, description, icon, classes: itemClasses = {}, link }, index = 0) => (
        <div
          class={twMerge(
            'flex intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade',
            panelClass,
            itemClasses?.panel
          )}
        >
          <div class="flex flex-col items-center mr-4 rtl:mr-0 rtl:ml-4">
            <div>
              <div class="flex items-center justify-center">
                {(icon || defaultIcon || numberList) && (
                  <Icon
                    name={icon || defaultIcon || 'tabler:number-' + (index + 1)}
                    class={twMerge(
                      'w-10 h-10 p-2 rounded-full border-2',
                      defaultIconClass,
                      itemClasses?.icon,
                      'tabler:number-' + (index + 1)
                    )}
                  />
                )}
              </div>
            </div>
            {index !== items.length - 1 && <div class="w-px h-full bg-black/10 dark:bg-slate-400/50" />}
          </div>
          <div class={`pt-1 ${index !== items.length - 1 ? 'pb-8' : ''}`}>
            {title && <p class={twMerge('text-xl font-bold', titleClass, itemClasses?.title)} set:html={title} />}
            {description && (
              <p
                class={twMerge('text-muted mt-2', descriptionClass, itemClasses?.description)}
                set:html={description}
              />
            )}
            {link && (
              <a href={link} class="text-link dark:text-white hover:text-link-hover dark:hover:text-link-hover">
                {link}
              </a>
            )}
          </div>
        </div>
      ))}
    </div>
  )
}
